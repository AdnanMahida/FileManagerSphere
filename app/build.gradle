plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-parcelize'
    id("com.google.devtools.ksp") version "1.8.21-1.0.11"

}

android {
    namespace 'com.etb.filemanager'
    compileSdk 34

    defaultConfig {
        applicationId "com.etb.filemanager"
        minSdk 26
        targetSdk 34
        versionCode 3
        versionName "1.1.1"

        resValue 'string', 'app_version', versionName + ' (' + versionCode + ')'
        buildConfigField 'String', 'FILE_PROVIDIER_AUTHORITY', 'APPLICATION_ID + ".file_provider"'
        resValue 'string', 'app_provider_authority', applicationId + '.app_provider'
        resValue 'string', 'file_provider_authority', applicationId + '.file_provider'
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildFeatures {
        aidl true
        buildConfig true
        viewBinding true
        compose true

    }
    composeOptions {
        kotlinCompilerExtensionVersion = "1.4.8"
    }


    dataBinding {
        enabled = true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }
    packaging {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

dependencies {

    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.6.1'
    implementation 'androidx.activity:activity-compose:1.7.2'
    implementation platform('androidx.compose:compose-bom:2023.03.00')
    implementation 'androidx.compose.ui:ui-graphics'
    implementation 'androidx.compose.ui:ui-tooling-preview'
    androidTestImplementation platform('androidx.compose:compose-bom:2023.03.00')
    androidTestImplementation 'androidx.compose.ui:ui-test-junit4'
    debugImplementation 'androidx.compose.ui:ui-test-manifest'
    ext {
        navigation_version = "2.6.0"
        material3 = "1.2.0-alpha05"
        coil_version = "2.4.0"
        room_version = "2.5.2"


    }


    // UI Libraries
    implementation 'androidx.core:core-ktx:1.10.1'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.9.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.preference:preference-ktx:1.2.1'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.recyclerview:recyclerview-selection:1.1.0'
    implementation 'me.zhanghai.android.fastscroll:library:1.2.0'


    // tests
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'

    // third-party libraries
    implementation 'com.github.bumptech.glide:glide:4.15.1'
    implementation(platform("io.github.Rosemoe.sora-editor:bom:0.21.1"))
    implementation("io.github.Rosemoe.sora-editor:editor")
    implementation("io.github.Rosemoe.sora-editor:language-textmate")
    implementation 'commons-net:commons-net:3.9.0'
    implementation 'org.tukaani:xz:1.9'
    implementation 'com.jakewharton.threetenabp:threetenabp:1.4.6'
    implementation 'dev.rikka.rikkax.preference:simplemenu-preference:1.0.3'
    implementation 'dev.rikka.shizuku:api:12.2.0'
    runtimeOnly("androidx.lifecycle:lifecycle-viewmodel-ktx:2.6.1")
    //https://github.com/Glavo/kala-compress
    implementation("org.glavo.kala:kala-compress:1.21.0.1-beta3")


    // Apache Commons IO
    implementation 'commons-io:commons-io:2.11.0'
    implementation 'org.apache.commons:commons-compress:1.21'

    // https://mvnrepository.com/artifact/net.sf.sevenzipjbinding/sevenzipjbinding
    implementation("net.sf.sevenzipjbinding:sevenzipjbinding:16.02-2.01")

    //Google
    implementation 'com.google.code.gson:gson:2.10.1'

    implementation "androidx.navigation:navigation-ui-ktx:$navigation_version"
    implementation "androidx.navigation:navigation-fragment-ktx:$navigation_version"

    //Compose
    def composeBom = platform('androidx.compose:compose-bom:2023.08.00')
    implementation(composeBom)
    androidTestImplementation(composeBom)

    implementation "androidx.compose.runtime:runtime"
    implementation "androidx.compose.ui:ui"
    implementation "androidx.compose.foundation:foundation"
    implementation "androidx.compose.foundation:foundation-layout"
    implementation "androidx.compose.material3:material3:$material3"
    implementation "androidx.compose.material3:material3-window-size-class:$material3"
    implementation "androidx.compose.runtime:runtime-livedata"
    implementation "androidx.compose.ui:ui-tooling"
    implementation "com.google.accompanist:accompanist-themeadapter-material:0.28.0"
    implementation "androidx.compose.material:material-icons-extended"

    //ExoPlayer

    implementation "androidx.media3:media3-exoplayer:1.1.1"
    implementation "androidx.media3:media3-ui:1.1.1"

    //zoomable

    implementation("net.engawapg.lib:zoomable:1.5.0-beta1")

    //Coil
    implementation("io.coil-kt:coil-bom")
    def coilBom = platform('io.coil-kt:coil-bom:2.4.0')
    implementation(coilBom)
    implementation "io.coil-kt:coil-video"
    implementation "io.coil-kt:coil-gif"
    implementation "io.coil-kt:coil-svg"
    implementation "io.coil-kt:coil-compose"


    //Room
    implementation("androidx.room:room-runtime:$room_version")
    implementation("androidx.core:core-ktx:1.10.1")
    ksp("androidx.room:room-compiler:$room_version")
    implementation("androidx.room:room-ktx:$room_version")


}

// NB: Android Studio can't find the imports; this does not affect the
// actual build since Gradle can find them just fine.

import com.android.tools.profgen.ArtProfileKt
import com.android.tools.profgen.ArtProfileSerializer
import com.android.tools.profgen.DexFile

project.afterEvaluate {
    tasks.each { task ->
        if (task.name.startsWith("compile") && task.name.endsWith("ReleaseArtProfile")) {
            task.doLast {
                outputs.files.each { file ->
                    if (file.name.endsWith(".profm")) {
                        println("Sorting ${file} ...")
                        def version = ArtProfileSerializer.valueOf("METADATA_0_0_2")
                        def profile = ArtProfileKt.ArtProfile(file)
                        def keys = new ArrayList(profile.profileData.keySet())
                        def sortedData = new LinkedHashMap()
                        Collections.sort keys, new DexFile.Companion()
                        keys.each { key -> sortedData[key] = profile.profileData[key] }
                        new FileOutputStream(file).with {
                            write(version.magicBytes$profgen)
                            write(version.versionBytes$profgen)
                            version.write$profgen(it, sortedData, "")
                        }
                    }
                }
            }
        }
    }
}